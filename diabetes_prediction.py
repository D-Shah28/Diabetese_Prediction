# -*- coding: utf-8 -*-
"""Diabetes_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WLtur8XOifk6MJp9gj9PGCiXQzPDBuL9
"""

# import the dependencies
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and analysis

PIMA Diabetes dataset
"""

# Load the data into pandas dataframe
diabetes_data = pd.read_csv('https://raw.githubusercontent.com/D-Shah28/Diabetese_Prediction/refs/heads/main/diabetes.csv')

# display first 5 rows of the dataframe
diabetes_data.head()

# no of rows and columns
diabetes_data.shape

#check for missing values
diabetes_data.isnull().sum()

# using statistical measure to understand the data
diabetes_data.describe()

diabetes_data['Outcome'].value_counts()

"""0 ->> Non Diabetic people

1 ->> Diabetic People
"""

# Mean of diabetic and non diabetic people
diabetes_data.groupby('Outcome').mean()

#seperate the labels and data
X = diabetes_data.drop(columns='Outcome', axis = 1) # axis = 1 for column and axis = 0 for rows
Y = diabetes_data['Outcome']

print(X)

print(Y)

"""Data Standardisation"""

#load StandardScaler function
scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = diabetes_data['Outcome']

print(X)
print(Y)

"""Splitting the data into train and test data"""

# splitting the data into train and test dataset
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, stratify=Y, random_state=2)

# Startify is used here to split the data into equal distribution that is the diabetic and non diabetic
# cases should be splitted into train and test in equal proportion that is there should not be more dibetic
# data in train dataset or non diabetic data in test dataset or vice versa

print(X.shape, X_train.shape, X_test.shape)

"""Training the Model

Model ->> Support Vector Machine
"""

# load the machine learning algorithm
classifier = svm.SVC(kernel='linear')

# training the support vector classifier
classifier.fit(X_train, Y_train)

"""Evaluating the model created by finding the accuracy score"""

#accuracy score for training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print('Accuracy Score of training data:',training_data_accuracy)

#accuracy score for test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print('Accuracy Score of training data:',test_data_accuracy)

"""Note-: here the accuracy is more than only 70% as we are dealing with small amount fo data.

also this is the perfect example of training the model as the model is niether overfitted or underfitted as the accuracy score is almost similar to each other
"""

# Feature Importance
if hasattr(classifier, 'coef_'):
    feature_importance = np.abs(classifier.coef_).flatten()
    plt.figure(figsize=(10,5))
    plt.barh(diabetes_data.columns[:-1], feature_importance, color='skyblue')
    plt.xlabel("Importance")
    plt.ylabel("Feature")
    plt.title("Feature Importance in Diabetes Prediction Model")
    plt.show()
else:
    print("Feature importance is not available for this model.")

"""Making a predictive system"""

# Creating the predictive systeme for prediction
# Define column names (same as training data)
column_names = ['Pregnancies','Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age']

while True:
    # Initialize a list to store input data
    person_data = []

    # Collect data for a single patient
    print("\nEnter patient details:")
    for feature in column_names:
        value = float(input(f"{feature}: "))
        person_data.append(value)

    # Create a pandas DataFrame with the collected input data
    input_df = pd.DataFrame([person_data], columns=column_names)

    # Standardize the input data using the scaler
    std_input_data = scaler.transform(input_df)

    # Make prediction
    prediction = classifier.predict(std_input_data)[0]

    # Print the predicted output
    result = "Diabetic" if prediction == 1 else "Non-Diabetic"
    print(f"Patient Diagnosis: {result}")

    # Ask user if they want to continue or exit
    choice = input("\nDo you want to predict for another patient? (yes to continue, any key to exit): ").strip().lower()
    if choice != 'yes':
        print("Exiting the program...")
        break